import cv2import numpy as npimport matplotlib.pyplot as pltimport ipdb########## section 2.a <Loading and displaying the image >########################load imageimg = cv2.imread('elephant.jpeg')#display imagecv2.imshow('image',img)cv2.waitKey(0)cv2.destroyAllWindows()############################################## section 2.b <displaying the image using Matplotlib >########################display imageplt.imshow(img)plt.show()#save imagecv2.imwrite('elephant_opencv.png', img)############################################## section 2.c <Loading and displaying the image >########################converting bgr to rgb formatimgaa = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)# display imageplt.imshow(imgaa)plt.show()#save imagecv2.imwrite('elephant_matplotlib.png', imgaa)############################################## section 2.d <read image in gray scale >########################converting image to gray  gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)# display imageplt.imshow(gray_img, cmap ='gray')plt.show()# save imagecv2.imwrite('elephant_gray.png', gray_img)############################################## section 3 <cropping the image >######################## crop image crop_img = img[300:1000, 50:500]# display imageimga1 = cv2.cvtColor(crop_img, cv2.COLOR_BGR2RGB)plt.imshow(imga1)plt.show()# save imagecv2.imwrite('babyelephant.png', crop_img)############################################## section 4.a <read image in color and convert to rgb >########################load imageimg1 = cv2.imread('elephant.jpeg')#converting to rgb spaceimg2 = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)############################################## section 4.b <adding 256 to every pixel using numpy >#######################img3 = img2 + 256print('image dtype ',img3.dtype)img4 = np.uint8(img3)print('image dtype',img4.dtype)plt.imshow(img4)plt.show()############################################## section 4.c <adding 256 to every pixel using opencv >#######################b,g,r = cv2.split(img1)k1 =cv2.add(b,256)k2 =cv2.add(g,256)k3 = cv2.add(r,256)img22 = cv2.merge((k3,k2,k1))plt.imshow(img22)plt.show()############################################## section 5.a <reading image and converting to rgb space>########################load imageimg1b = cv2.imread('elephant.jpeg')#converting to rgb spaceimg2b = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)############################################## section 5.b <downsample image by factor 10>#######################img_scaled = cv2.resize(img1b,None,fx=0.1, fy=0.1)img2bb = cv2.cvtColor(img_scaled, cv2.COLOR_BGR2RGB)plt.imshow(img2bb)plt.show()cv2.imwrite('elephant_10xdown.png', img_scaled)############################################## section 5.c <upsample image by factor 10 using 2 methods>########################upsampling by BICUBIC methodimg_scaled1 = cv2.resize(img_scaled,None,fx=10, fy=10, interpolation = cv2.INTER_CUBIC)imgb2 = cv2.cvtColor(img_scaled1, cv2.COLOR_BGR2RGB)plt.imshow(imgb2)plt.show()cv2.imwrite('elephant_10xup_bicubic.png', img_scaled1)#upsampling by NEAREST NEIGHBOURimg_scaled2 = cv2.resize(img_scaled,None,fx=10, fy=10, interpolation = cv2.INTER_NEAREST)imgb21 = cv2.cvtColor(img_scaled2, cv2.COLOR_BGR2RGB)plt.imshow(imgb21)plt.show()cv2.imwrite('elephant_10xup_nearestneighbour.png', img_scaled2)############################################## section 5.d <absolute difference between groud truth and up sampled images>######################## diff image for bicubicimdiff1 = cv2.absdiff(img1b,img_scaled1)cv2.imwrite('elephant_diffimg_bicubic.png', imdiff1)# diff image for nearest neighbourimdiff2 = cv2.absdiff(img1b,img_scaled2)cv2.imwrite('elephant_diffimg_nearestneighbour.png', imdiff2)# sum of all pixels in diff image for bicubick = cv2.sumElems(imdiff1)k1 = sum(k)print(k1)# sum of all pixels in diff image for nearest neighbourk2 = cv2.sumElems(imdiff2)k3 = sum(k2)print(k3)####################################